
üòÉ Servi√ßo de Aplicativo integrado ao Servidor de Banco de dados do Azure - MySQL üòÉ


Obs.: Usando vari√°veis de ambiente


Ver: 01/11/2024


-------------------------------------------------------------------------------------------


0. Crie um servidor de banco de dados na Azure [Servidores do Banco de Dados do Azure para MySQL]

  - User: <QUALQUER>
 
  - Password: <QUALQUER QUE N√ÉO USE O CARACTER '@'>


Obs.: Sugest√£o: 

  User: tux
  Pass: ABC123xyz


‚ñ∂ Na guia Rede
 
  ‚ñ∂ Regras de Firewall

    ‚ñ∂ + Adicionar 0.0.0.0 ‚Äì 255.255.255.255


0.1 Fa√ßa uma conex√£o ao servidor de banco de dados MySQL para criar um novo banco de dados.

CREATE DATABASE db_users;


-------------------------------------------------------------------------------------------


[Windows Environment]


üçÄ Em uma nova pasta, abrir o Git Bash.


‚öΩ 1. Clonar do Github a aplica√ß√£o que ser√° utilizada.

git clone https://github.com/roger437unix/app_flask_mysql_v2.git



‚öΩ 2. Dentro da pasta gerada pela clonagem, criar e ativar um ambiente virtual Python.

cd app_flask_mysql_v2

python -m venv .venv                 

source .venv/Scripts/activate         



‚öΩ 3. Instalar os requisitos da aplica√ß√£o [m√≥dulos do Python].

pip install -r requirements.txt



‚öΩ 4. Criar as vari√°veis de ambiente no S.O. e testar a aplica√ß√£o localmente.

export     USER="<DATABASE_USER>"
export PASSWORD="<DATABASE_USER_PASSWORD>"
export     HOST="<DATABASE_ADDRESS>"

python app.py


-------------------------------------------------------------------------------------------


üçä 5. Criar servi√ßo de aplicativo do Azure [Aplicatico Web] para fazer o deploy da aplica√ß√£o usando o VSCode.


  ‚ñ∂ Publicar: C√≥digo

  ‚ñ∂ Pilha de runtime: Python 3.12



Obs.: Ap√≥s o servi√ßo de aplicativo ser provisionado criar as vari√°veis de ambiente:

‚ñ∂ Menu Configura√ß√µes => vari√°veis de ambiente => configura√ß√µes de aplicativo

USER 		<DATABASE_USER>
PASSWORD 	<DATABASE_USER_PASSWORD>
HOST		<DATABASE_ADDRESS>


-------------------------------------------------------------------------------------------


credenciais.py

import os, sys

USER     = os.getenv('USER')
PASSWORD = os.getenv('PASSWORD')
HOST     = os.getenv('HOST')

if USER is not None and PASSWORD is not None and HOST is not None:
  db_config = {
    'host': HOST,
    'user': USER,
    'password': PASSWORD,
    'database': 'db_users'
  }
else:
  print(f'\n*** The enviroment variables "USER", "PASSWORD" and "HOST" are empty ***\n')
  print(f'Execute no Git Bash:\n')
  print(f'export USER     = "<DATABASE_USER>"')
  print(f'export PASSWORD = "<DATABASE_USER_PASSWORD>"')
  print(f'export HOST     = "<DATABASE_ADDRESS>"\n')
  sys.exit()


-------------------------------------------------------------------------------------------


